
{
    "WinDbg": 
    [
        {
            "command": "!address",
            "description": "Displays information about the memory that the target process or target computer uses",
            "example": "!address 75831234"
        },
        {
            "command": "!address -f:[Protection Attribute]",
            "description": "Display information about the virtual memory regions allocated in the target process that have the specific protection attribute. Attributes include PAGE_EXECUTE, PAGE_EXECUTE_READ, PAGE_EXECUTE_READWRITE, PAGE_READONLY, PAGE_WRITECOPY, PAGE_READWRITE",
            "example": "!address -f:PAGE_READWRITE"
        },
        {
            "command": "!dh [address]",
            "description": "Display the headers for a specific portion of memory",
            "example": "!dh 0x7fff486a0000"
        },
        {
            "command": "!envvar COMPUTERNAME",
            "description": "Get the hostname",
            "example": "!envvar COMPUTERNAME"
        },
        {
            "command": "!teb [address]",
            "description": "Show threat environment block for one specific thread",
            "example": "!teb 0000005d`7d963000"
        },
        {
            "command": ".writemem [path on disk] [start address] L[size]",
            "description": "Write a file given the start of address and the region size",
            "example": ".writemem C:\\testfile.bin 0x00007FF64C600000 L1000"
        },
        {
            "command": "? [end address] - [base address]",
            "description": "Manually calculate a region size",
            "example": "? 0x00007FF64C601000 - 0x00007FF64C600000"
        },
        {
            "command": "bc *",
            "description": "Clear all breakpoints",
            "example": "bc *"
        },
        {
            "command": "bd [breakpoint ID]",
            "description": "Disable a specific breakpoint",
            "example": "bd 1"
        },
        {
            "command": "be [breakpoint ID]",
            "description": "Enable a specific breakpoint",
            "example": "be 1"
        },
        {
            "command": "bp",
            "description": "List all breakpoints",
            "example": "bp"
        },
        {
            "command": "bp [module name/function name]",
            "description": "Puts a breakpoint",
            "example": "bp mymodule!myfunction"
        },
        {
            "command": "dt",
            "description": "Display the type of the symbol",
            "example": "dt mystruct"
        },
        {
            "command": "dv",
            "description": "To display the local variables",
            "example": "dv"
        },
        {
            "command": "g",
            "description": "Execute the instructions",
            "example": "g"
        },
        {
            "command": "gu",
            "description": "To execute the instruction until the current function ends",
            "example": "gu"
        },
        {
            "command": "lmf",
            "description": "List DLL files, prints out start and end addresses",
            "example": "lmf"
        },
        {
            "command": "p",
            "description": "Step through instruction and to treat a CALL as a single instruction",
            "example": "p"
        },
        {
            "command": "r",
            "description": "Display the value of registers",
            "example": "r"
        },
        {
            "command": "r [register name]=[value]",
            "description": "Set the value of a register",
            "example": "r rax=12345678"
        },
        {
            "command": "s [base address] L?[range size] [hex bytes]",
            "description": "Search for a specific byte pattern in memory - useful if you already know specific bytes (e.g. a payload) and you want to find the address of where it is",
            "example": "s 0 L?8000000000000000 fc 48 83 e4 f0 e8 cc 00 00 00 41 51 41 50"
        },
        {
            "command": "s-sa [base address] [end address]",
            "description": "Check a range of addresses (base to end) for strings",
            "example": "s-sa 00007fff`486a0000 00007fff`486a1000"
        },
        {
            "command": "t",
            "description": "Trace through instruction and to get in the CALL instruction",
            "example": "t"
        },
        {
            "command": "uf [function name]",
            "description": "Disassemble a function",
            "example": ""
        },
        {
            "command": "wt",
            "description": "See stats of a function",
            "example": ""
        }
    ],
  
    "GDB":
    [
        {
            "command": "b main",
            "description": "Puts a breakpoint at the beginning of the program",
            "example": ""
        }   
    ],

    "GDB-PWNDBG":
    [
 
        {
            "command": "cyclic -n [pattern size] [length]",
            "description": "Generate a cyclic pattern to use",
            "example": "cyclic -n 4 100"
        }
    ]
}
